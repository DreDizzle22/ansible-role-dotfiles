---
## ------------------------------
## Tasks for dotfiles
## ------------------------------

- name: "Checking If {{ dotfiles_folder_path }} Directory Exists"
  stat:
    path: "{{ dotfiles_folder_path }}"
  register: dotfiles_directory

- name: "Check if dotfiles directory does not exist" 
  fail: msg="Please ensure {{ dotfiles_folder_path }} directory does not exist"
  when: dotfiles_directory.stat.exists

- name: "Clone {{ dotfiles_git_repo }} into {{ dotfiles_folder_path }}"
  git:
    repo: "{{ dotfiles_git_repo }}"
    dest: "{{ dotfiles_folder_path }}"
    clone: yes
    force: yes
    recursive: no
    remote: origin
    bare: true

- name: "Setting status.showUntrackedFiles = no in the Local Git Config"
  git_config:
    name: "status.showUntrackedFiles"
    repo: "{{ dotfiles_folder_path }}"
    scope: "local"
    value: "no"

- name: "Running Command: git --git-dir={{ dotfiles_folder_path }} --work-tree={{ git_work_tree_path }} pull origin master"
  shell: |
    git --git-dir="{{ dotfiles_folder_path }}" --work-tree="{{ git_work_tree_path }}" checkout

- name: "Prepending \"alias {{ dotfiles_cmd_alias_name | default('dotfiles') }}='{{ git_binary_path }} --git-dir={{ home_path }}/dotfiles --work-tree={{ git_work_tree_path }}'\" to ~/.bashrc"
  blockinfile:
    path: "{{ bashrc_path }}"
    insertbefore: "BOF"
    block: alias {{ dotfiles_cmd_alias_name | default('dotfiles') }}='{{ git_binary_path }} --git-dir="{{ dotfiles_folder_path }}" --work-tree="{{ git_work_tree_path }}"'

- name: "Sourcing {{ file_to_source }} file"
  shell: |
    . "{{ file_to_source }}"
