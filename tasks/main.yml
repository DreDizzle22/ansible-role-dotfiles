---
## ------------------------------
## Tasks for dotfiles
## ------------------------------

- name: "Checking If {{ dotfiles_git_repo_path }} Directory Exists"
  stat:
    path: "{{ dotfiles_git_repo_path }}"
  register: dotfiles_directory

- block:
    - name: "Checking If {{ dotfiles_git_repo_path }} Directory Exists"
      debug:
        msg: "A dotfiles directory already exists. Run '{{ dotfiles_alias }} status' to confirm that dotfiles was configured correctly. Otherwise please remove the directory in order run this playbook."
    - meta: end_play
  when: dotfiles_directory.stat.exists

- name: "Clone {{ dotfiles_git_repo_url }} into {{ dotfiles_git_repo_path }}"
  git:
    repo: "{{ dotfiles_git_repo_url }}"
    dest: "{{ dotfiles_git_repo_path }}"
    clone: yes
    force: yes
    recursive: no
    remote: origin
    bare: true

- name: "Setting status.showUntrackedFiles = no in the Local Git Config"
  git_config:
    name: "status.showUntrackedFiles"
    repo: "{{ dotfiles_git_repo_path }}"
    scope: "local"
    value: "no"

- name: "Running Command: git --git-dir={{ dotfiles_git_repo_path }} --work-tree={{ dotfiles_home_path }} checkout -f"
  shell: |
    git --git-dir="{{ dotfiles_git_repo_path }}" --work-tree="{{ dotfiles_home_path }}" checkout -f

- name: "Prepending \"alias {{ dotfiles_alias | default('dotfiles') }}='git --git-dir={{ dotfiles_home_path }}/dotfiles --work-tree={{ dotfiles_home_path }}'\" to ~/.bashrc"
  blockinfile:
    path: "{{ dotfiles_bashrc_file_path }}"
    insertbefore: "BOF"
    block: alias {{ dotfiles_alias | default('dotfiles') }}='git --git-dir="{{ dotfiles_git_repo_path }}" --work-tree="{{ dotfiles_home_path }}"'
